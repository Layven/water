
cbuffer data :register(b0)
{
	float4x4 worldViewProj;
	float time;
	float dummy;
	float speed[2];
	float wavelength[2];
	float amplitude[2];
	float4 waveDir[2];
};

struct VS_IN
{
	float4 position : POSITION;
	float4 color : COLOR;
};

struct PS_IN
{
	float4 position : SV_POSITION;
	float4 color : COLOR;
};

PS_IN VS( VS_IN input)
{
	PS_IN output = (PS_IN)0;

	float4 pos = input.position;
	
	float dist = dot(pos,waveDir[0]);

	float phase = (dist + speed[0]*time)/wavelength[0];

	float offsetX = amplitude[0]*-cos(phase);
	float offsetY = amplitude[0]*-sin(phase);

	pos += offsetX*waveDir[0];
	pos.y += offsetY;
	
	pos = mul(worldViewProj,pos);

	output.position = pos;
	output.color=input.color;

	return output;
}

float4 PS( PS_IN input ) : SV_Target
{
	return input.color;
}